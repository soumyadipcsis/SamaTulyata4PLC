PROC CONTROLSET3;
VAR
    // Control Variables
    SP : INTEGER; // Setpoint
    PV : INTEGER; // Process Value
    OUT : INTEGER; // Output Control Value

    // PID Tuning Parameters (Integer-Based)
    Kp : INTEGER; // Proportional Gain
    Ti : INTEGER; // Integral Time
    Td : INTEGER; // Derivative Time

    // PID Internal Variables
    e : INTEGER; // Error
    e_prev : INTEGER; // Previous Error
    P : INTEGER; // Proportional Term
    I : INTEGER; // Integral Term
    D : INTEGER; // Derivative Term
    Integral : INTEGER; // Accumulated Integral
    Derivative : INTEGER; // Derivative Term Storage

    // Control Mode
    ManualMode : BOOLEAN; // Manual/Auto Mode
    ManualOutput : INTEGER; // Output in Manual Mode

    // Safety & Limits
    MinOutput : INTEGER := 0; // Minimum Output Limit
    MaxOutput : INTEGER := 100; // Maximum Output Limit

    // Temporary Integer Variables
    TempValue1 : INTEGER; TempValue2 : INTEGER;

BEGIN
STEP 'EXECUTE_CONTROLSET3'
IF ManualMode THEN
    OUT := ManualOutput; // Direct Control in Manual Mode
ELSE
    // ****************** PID CONTROL CALCULATIONS ******************
    e := SP - PV; // Compute Error

    // Proportional Term
    P := Kp * e;

    // Integral Term with Anti-Windup
    TempValue1 := e * Ti;
    TempValue1 := TempValue1 / 100; // Scale down to prevent overflow
    IF ABS(Integral) < 10000 THEN
        Integral := Integral + TempValue1;
    END
    I := Integral;

    // Derivative Term
    TempValue2 := e - e_prev;
    TempValue2 := (TempValue2 * 100) / Td; // Integer-based scaling
    D := (Td * TempValue2) / 100;

    // Compute Final Output
    OUT := P + I + D;

    // Apply Output Limits
    IF OUT > MaxOutput THEN
        OUT := MaxOutput;
    ELSE
        IF OUT < MinOutput THEN
            OUT := MinOutput;
    END

    // Store Previous Error for Next Cycle
    e_prev := e;
ENDSTEP

END.
